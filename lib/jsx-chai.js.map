{"version":3,"sources":["jsx-chai.js"],"names":[],"mappings":";;;kBAIwB,O;;AAJxB;;AACA;;;;AACA;;;;;;AAEe,SAAS,OAAT,cAAyC;AAAA,MAAvB,SAAuB,QAAvB,SAAuB;AAAA,MAAV,OAAU,SAAV,OAAU;;;AAEtD,YAAU,WAAV,CAAsB,KAAtB,EAA6B,SAAS,MAAT,GAAkB;AAC7C,SAAK,MAAL,CACE,qCAAU,KAAK,IAAf,CADF,EAEE,sCAFF,EAGE,0CAHF;AAKD,GAND;;AAQA,WAAS,SAAT,CAAmB,IAAnB,EAAyB;AACvB,WAAO,SAAS,gBAAT,CAA0B,MAA1B,EAAkC;AACvC,aAAO,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AAClC,YAAI,CAAC,qCAAU,KAAK,IAAf,CAAL,EAA2B;AACzB,iBAAO,OAAO,KAAP,CAAa,IAAb,EAAmB,SAAnB,CAAP;AACD;;AAED,YAAM,WAAW,uCAAwB,GAAxB,CAAjB;AACA,YAAM,SAAS,uCAAwB,KAAK,IAA7B,CAAf;;AAEA,eAAO,KAAK,IAAL,CAAU,IAAV,EAAgB,EAAC,QAAD,EAAM,kBAAN,EAAgB,cAAhB,EAAhB,CAAP;AACD,OATD;AAUD,KAXD;AAYD;;AAED,WAAS,MAAT,QAAoC;AAAA,QAAnB,QAAmB,SAAnB,QAAmB;AAAA,QAAT,MAAS,SAAT,MAAS;;AAClC,SAAK,MAAL,CACE,kCAAS,MAAT,MAAqB,kCAAS,QAAT,CADvB,EAEE,iCAFF,EAGE,qCAHF,EAIE,QAJF,EAKE,MALF,EAME,IANF;AAQD;;AAED,WAAS,UAAT,QAAwC;AAAA,QAAnB,QAAmB,SAAnB,QAAmB;AAAA,QAAT,MAAS,SAAT,MAAS;;AACtC,SAAK,MAAL,CACE,CAAC,kCAAS,MAAT,EAAiB,OAAjB,CAAyB,kCAAS,QAAT,CAAzB,CADH,kCAEgC,QAAQ,QAAR,CAFhC,sCAGoC,QAAQ,QAAR,CAHpC,EAIE,QAJF,EAKE,MALF;AAOD;;AAED,WAAS,gBAAT,CAA0B,IAA1B,EAAgC;AAC9B,cAAU,wBAAV,CACE,IADF,EAEE,UAAU,UAAV,CAFF,EAGE,SAAS,cAAT,CAAwB,MAAxB,EAAgC;AAC9B,aAAO,SAAS,YAAT,GAAwB;AAC7B,eAAO,OAAO,KAAP,CAAa,IAAb,EAAmB,SAAnB,CAAP;AACD,OAFD;AAGD,KAPH;AASD;;AAED,YAAU,eAAV,CAA0B,KAA1B,EAAiC,UAAU,MAAV,CAAjC;AACA,YAAU,eAAV,CAA0B,MAA1B,EAAkC,UAAU,MAAV,CAAlC;;AAEA,mBAAiB,SAAjB;AACA,mBAAiB,SAAjB;AACA,mBAAiB,UAAjB;AACA,mBAAiB,UAAjB;AAED","file":"jsx-chai.js","sourcesContent":["import {isElement} from 'react-addons-test-utils'\nimport collapse from 'collapse-white-space'\nimport reactElementToJSXString from 'react-element-to-jsx-string'\n\nexport default function jsxChai({Assertion}, {inspect}) {\n\n  Assertion.addProperty('jsx', function addJsx() {\n    this.assert(\n      isElement(this._obj),\n      'expected #{this} to be a JSX element',\n      'expected #{this} not to be a JSX element'\n    )\n  })\n\n  function jsxMethod(func) {\n    return function jsxMethodWrapper(_super) {\n      return function jsxMethodInner(jsx) {\n        if (!isElement(this._obj)) {\n          return _super.apply(this, arguments)\n        }\n\n        const expected = reactElementToJSXString(jsx)\n        const actual = reactElementToJSXString(this._obj)\n\n        return func.call(this, {jsx, expected, actual})\n      }\n    }\n  }\n\n  function jsxEql({expected, actual}) {\n    this.assert(\n      collapse(actual) === collapse(expected),\n      'expected #{act} to equal #{exp}',\n      'expected #{act} to not equal #{exp}',\n      expected,\n      actual,\n      true\n    )\n  }\n\n  function jsxInclude({expected, actual}) {\n    this.assert(\n      ~collapse(actual).indexOf(collapse(expected)),\n      `expected #{act} to contain ${inspect(expected)}`,\n      `expected #{act} to not contain ${inspect(expected)}`,\n      expected,\n      actual\n    )\n  }\n\n  function overwriteInclude(name) {\n    Assertion.overwriteChainableMethod(\n      name,\n      jsxMethod(jsxInclude),\n      function includeWrapper(_super) {\n        return function includeInner() {\n          return _super.apply(this, arguments)\n        }\n      }\n    )\n  }\n\n  Assertion.overwriteMethod('eql', jsxMethod(jsxEql))\n  Assertion.overwriteMethod('eqls', jsxMethod(jsxEql))\n\n  overwriteInclude('include')\n  overwriteInclude('contain')\n  overwriteInclude('includes')\n  overwriteInclude('contains')\n\n}\n"],"sourceRoot":"/source/"}