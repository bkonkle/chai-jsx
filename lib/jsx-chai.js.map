{"version":3,"sources":["jsx-chai.js"],"names":[],"mappings":";;;kBAIwB;;AAJxB;;AACA;;;;AACA;;;;;;AAEe,SAAS,OAAT,cAAyC;MAAvB,2BAAuB;MAAV,wBAAU;;;AAEtD,YAAU,WAAV,CAAsB,KAAtB,EAA6B,SAAS,MAAT,GAAkB;AAC7C,SAAK,MAAL,CACE,qCAAU,KAAK,IAAL,CADZ,EAEE,sCAFF,EAGE,0CAHF,EAD6C;GAAlB,CAA7B,CAFsD;;AAUtD,WAAS,SAAT,CAAmB,IAAnB,EAAyB;AACvB,WAAO,SAAS,gBAAT,CAA0B,MAA1B,EAAkC;AACvC,aAAO,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AAClC,YAAI,CAAC,qCAAU,KAAK,IAAL,CAAX,EAAuB;AACzB,iBAAO,OAAO,KAAP,CAAa,IAAb,EAAmB,SAAnB,CAAP,CADyB;SAA3B;;AAIA,YAAM,WAAW,kCAAS,uCAAwB,GAAxB,CAAT,CAAX,CAL4B;AAMlC,YAAM,SAAS,kCAAS,uCAAwB,KAAK,IAAL,CAAjC,CAAT,CAN4B;;AAQlC,eAAO,KAAK,IAAL,CAAU,IAAV,EAAgB,EAAC,QAAD,EAAM,kBAAN,EAAgB,cAAhB,EAAhB,CAAP,CARkC;OAA7B,CADgC;KAAlC,CADgB;GAAzB;;AAeA,WAAS,MAAT,QAAoC;QAAnB,0BAAmB;QAAT,sBAAS;;AAClC,SAAK,MAAL,CACE,WAAW,QAAX,EACA,iCAFF,EAGE,qCAHF,EAIE,QAJF,EAKE,MALF,EAME,IANF,EADkC;GAApC;;AAWA,WAAS,UAAT,QAAwC;QAAnB,0BAAmB;QAAT,sBAAS;;AACtC,SAAK,MAAL,CACE,CAAC,OAAO,OAAP,CAAe,QAAf,CAAD,kCAC8B,QAAQ,QAAR,CAFhC,sCAGoC,QAAQ,QAAR,CAHpC,EAIE,QAJF,EAKE,MALF,EADsC;GAAxC;;AAUA,WAAS,gBAAT,CAA0B,IAA1B,EAAgC;AAC9B,cAAU,wBAAV,CACE,IADF,EAEE,UAAU,UAAV,CAFF,EAGE,SAAS,cAAT,CAAwB,MAAxB,EAAgC;AAC9B,aAAO,SAAS,YAAT,GAAwB;AAC7B,eAAO,OAAO,KAAP,CAAa,IAAb,EAAmB,SAAnB,CAAP,CAD6B;OAAxB,CADuB;KAAhC,CAHF,CAD8B;GAAhC;;AAYA,YAAU,eAAV,CAA0B,KAA1B,EAAiC,UAAU,MAAV,CAAjC,EA1DsD;AA2DtD,YAAU,eAAV,CAA0B,MAA1B,EAAkC,UAAU,MAAV,CAAlC,EA3DsD;;AA6DtD,mBAAiB,SAAjB,EA7DsD;AA8DtD,mBAAiB,SAAjB,EA9DsD;AA+DtD,mBAAiB,UAAjB,EA/DsD;AAgEtD,mBAAiB,UAAjB,EAhEsD;CAAzC","file":"jsx-chai.js","sourcesContent":["import {isElement} from 'react-addons-test-utils'\nimport collapse from 'collapse-white-space'\nimport reactElementToJSXString from 'react-element-to-jsx-string'\n\nexport default function jsxChai({Assertion}, {inspect}) {\n\n  Assertion.addProperty('jsx', function addJsx() {\n    this.assert(\n      isElement(this._obj),\n      'expected #{this} to be a JSX element',\n      'expected #{this} not to be a JSX element'\n    )\n  })\n\n  function jsxMethod(func) {\n    return function jsxMethodWrapper(_super) {\n      return function jsxMethodInner(jsx) {\n        if (!isElement(this._obj)) {\n          return _super.apply(this, arguments)\n        }\n\n        const expected = collapse(reactElementToJSXString(jsx))\n        const actual = collapse(reactElementToJSXString(this._obj))\n\n        return func.call(this, {jsx, expected, actual})\n      }\n    }\n  }\n\n  function jsxEql({expected, actual}) {\n    this.assert(\n      actual === expected,\n      'expected #{act} to equal #{exp}',\n      'expected #{act} to not equal #{exp}',\n      expected,\n      actual,\n      true\n    )\n  }\n\n  function jsxInclude({expected, actual}) {\n    this.assert(\n      ~actual.indexOf(expected),\n      `expected #{act} to contain ${inspect(expected)}`,\n      `expected #{act} to not contain ${inspect(expected)}`,\n      expected,\n      actual\n    )\n  }\n\n  function overwriteInclude(name) {\n    Assertion.overwriteChainableMethod(\n      name,\n      jsxMethod(jsxInclude),\n      function includeWrapper(_super) {\n        return function includeInner() {\n          return _super.apply(this, arguments)\n        }\n      }\n    )\n  }\n\n  Assertion.overwriteMethod('eql', jsxMethod(jsxEql))\n  Assertion.overwriteMethod('eqls', jsxMethod(jsxEql))\n\n  overwriteInclude('include')\n  overwriteInclude('contain')\n  overwriteInclude('includes')\n  overwriteInclude('contains')\n\n}\n"],"sourceRoot":"/source/"}