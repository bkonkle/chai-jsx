(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react-dom/test-utils"), require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["react-dom/test-utils", "react"], factory);
	else if(typeof exports === 'object')
		exports["jsxChai"] = factory(require("react-dom/test-utils"), require("react"));
	else
		root["jsxChai"] = factory(root["react-dom/test-utils"], root["React"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_35__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = jsxChai;
	
	var _testUtils = __webpack_require__(5);
	
	var _collapseWhiteSpace = __webpack_require__(7);
	
	var _collapseWhiteSpace2 = _interopRequireDefault(_collapseWhiteSpace);
	
	var _reactElementToJsxString = __webpack_require__(6);
	
	var _reactElementToJsxString2 = _interopRequireDefault(_reactElementToJsxString);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function jsxChai(_ref, _ref2) {
	  var Assertion = _ref.Assertion;
	  var inspect = _ref2.inspect;
	
	
	  Assertion.addProperty('jsx', function addJsx() {
	    this.assert((0, _testUtils.isElement)(this._obj), 'expected #{this} to be a JSX element', 'expected #{this} not to be a JSX element');
	  });
	
	  function jsxMethod(func) {
	    return function jsxMethodWrapper(_super) {
	      return function jsxMethodInner(jsx) {
	        if (!(0, _testUtils.isElement)(this._obj)) {
	          return _super.apply(this, arguments);
	        }
	
	        var expected = (0, _reactElementToJsxString2.default)(jsx);
	        var actual = (0, _reactElementToJsxString2.default)(this._obj);
	
	        return func.call(this, { jsx: jsx, expected: expected, actual: actual });
	      };
	    };
	  }
	
	  function jsxEql(_ref3) {
	    var expected = _ref3.expected,
	        actual = _ref3.actual;
	
	    this.assert((0, _collapseWhiteSpace2.default)(actual) === (0, _collapseWhiteSpace2.default)(expected), 'expected #{act} to equal #{exp}', 'expected #{act} to not equal #{exp}', expected, actual, true);
	  }
	
	  function jsxInclude(_ref4) {
	    var expected = _ref4.expected,
	        actual = _ref4.actual;
	
	    this.assert(~(0, _collapseWhiteSpace2.default)(actual).indexOf((0, _collapseWhiteSpace2.default)(expected)), 'expected #{act} to contain ' + inspect(expected), 'expected #{act} to not contain ' + inspect(expected), expected, actual);
	  }
	
	  function overwriteInclude(name) {
	    Assertion.overwriteChainableMethod(name, jsxMethod(jsxInclude), function includeWrapper(_super) {
	      return function includeInner() {
	        return _super.apply(this, arguments);
	      };
	    });
	  }
	
	  Assertion.overwriteMethod('eql', jsxMethod(jsxEql));
	  Assertion.overwriteMethod('eqls', jsxMethod(jsxEql));
	
	  overwriteInclude('include');
	  overwriteInclude('contain');
	  overwriteInclude('includes');
	  overwriteInclude('contains');
	}

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}
	
	module.exports = isObject;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(21);
	
	/** Built-in value references. */
	var Symbol = root.Symbol;
	
	module.exports = Symbol;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(2),
	    getRawTag = __webpack_require__(17),
	    objectToString = __webpack_require__(20);
	
	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';
	
	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}
	
	module.exports = baseGetTag;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	var toFinite = __webpack_require__(29);
	
	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger(value) {
	  var result = toFinite(value),
	      remainder = result % 1;
	
	  return result === result ? (remainder ? result - remainder : result) : 0;
	}
	
	module.exports = toInteger;


/***/ }),
/* 5 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _fill2 = __webpack_require__(23);
	
	var _fill3 = _interopRequireDefault(_fill2);
	
	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	};
	
	exports.default = reactElementToJSXString;
	
	var _react = __webpack_require__(35);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _testUtils = __webpack_require__(5);
	
	var _collapseWhiteSpace = __webpack_require__(8);
	
	var _collapseWhiteSpace2 = _interopRequireDefault(_collapseWhiteSpace);
	
	var _isPlainObject = __webpack_require__(11);
	
	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
	
	var _stringifyObject = __webpack_require__(33);
	
	var _stringifyObject2 = _interopRequireDefault(_stringifyObject);
	
	var _sortobject = __webpack_require__(32);
	
	var _sortobject2 = _interopRequireDefault(_sortobject);
	
	var _traverse = __webpack_require__(34);
	
	var _traverse2 = _interopRequireDefault(_traverse);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function reactElementToJSXString(ReactElement) {
	  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      displayName = _ref.displayName,
	      _ref$filterProps = _ref.filterProps,
	      filterProps = _ref$filterProps === undefined ? [] : _ref$filterProps,
	      _ref$showDefaultProps = _ref.showDefaultProps,
	      showDefaultProps = _ref$showDefaultProps === undefined ? true : _ref$showDefaultProps,
	      _ref$showFunctions = _ref.showFunctions,
	      showFunctions = _ref$showFunctions === undefined ? false : _ref$showFunctions,
	      _ref$tabStop = _ref.tabStop,
	      tabStop = _ref$tabStop === undefined ? 2 : _ref$tabStop,
	      _ref$useBooleanShorth = _ref.useBooleanShorthandSyntax,
	      useBooleanShorthandSyntax = _ref$useBooleanShorth === undefined ? true : _ref$useBooleanShorth,
	      maxInlineAttributesLineLength = _ref.maxInlineAttributesLineLength;
	
	  var getDisplayName = displayName || getDefaultDisplayName;
	
	  return toJSXString({ ReactElement: ReactElement });
	
	  function toJSXString(_ref2) {
	    var _ref2$ReactElement = _ref2.ReactElement,
	        Element = _ref2$ReactElement === undefined ? null : _ref2$ReactElement,
	        _ref2$lvl = _ref2.lvl,
	        lvl = _ref2$lvl === undefined ? 0 : _ref2$lvl,
	        _ref2$inline = _ref2.inline,
	        inline = _ref2$inline === undefined ? false : _ref2$inline;
	
	    if (typeof Element === 'string' || typeof Element === 'number') {
	      return Element;
	    } else if (!(0, _testUtils.isElement)(Element)) {
	      throw new Error('react-element-to-jsx-string: Expected a ReactElement,\ngot `' + (typeof Element === 'undefined' ? 'undefined' : _typeof(Element)) + '`');
	    }
	
	    var tagName = getDisplayName(Element);
	
	    var out = '<' + tagName;
	    var props = formatProps(Element.props, getDefaultProps(Element), inline, lvl);
	    var attributes = [];
	    var children = _react2.default.Children.toArray(Element.props.children).filter(onlyMeaningfulChildren);
	
	    if (Element.ref !== null) {
	      attributes.push(getJSXAttribute('ref', Element.ref, inline, lvl));
	    }
	
	    if (Element.key !== null &&
	    // React automatically add key=".X" when there are some children
	    !/^\./.test(Element.key)) {
	      attributes.push(getJSXAttribute('key', Element.key, inline, lvl));
	    }
	
	    attributes = attributes.concat(props).filter(function (_ref3) {
	      var name = _ref3.name;
	      return filterProps.indexOf(name) === -1;
	    });
	
	    var outMultilineAttr = out;
	    var outInlineAttr = out;
	    var containsMultilineAttr = false;
	    attributes.forEach(function (attribute) {
	      var isMultilineAttr = false;
	      if (['plainObject', 'array', 'function'].indexOf(attribute.type) > -1) {
	        isMultilineAttr = attribute.value.indexOf('\n') > -1;
	      }
	
	      if (isMultilineAttr) {
	        containsMultilineAttr = true;
	      }
	
	      outInlineAttr += ' ';
	      outMultilineAttr += '\n' + spacer(lvl + 1, tabStop);
	
	      if (useBooleanShorthandSyntax && attribute.value === '{true}') {
	        outInlineAttr += '' + attribute.name;
	        outMultilineAttr += '' + attribute.name;
	      } else {
	        outInlineAttr += attribute.name + '=' + attribute.value;
	        outMultilineAttr += attribute.name + '=' + attribute.value;
	      }
	    });
	
	    outMultilineAttr += '\n' + spacer(lvl, tabStop);
	
	    if (shouldRenderMultilineAttr(attributes, outInlineAttr, containsMultilineAttr, inline, lvl)) {
	      out = outMultilineAttr;
	    } else {
	      out = outInlineAttr;
	    }
	
	    if (children.length > 0) {
	      out += '>';
	      lvl++;
	      if (!inline) {
	        out += '\n';
	        out += spacer(lvl, tabStop);
	      }
	
	      if (typeof children === 'string') {
	        out += children;
	      } else {
	        out += children.reduce(mergePlainStringChildren, []).map(recurse({ lvl: lvl, inline: inline })).join('\n' + spacer(lvl, tabStop));
	      }
	      if (!inline) {
	        out += '\n';
	        out += spacer(lvl - 1, tabStop);
	      }
	      out += '</' + tagName + '>';
	    } else {
	      if (!isInlineAttributeTooLong(attributes, outInlineAttr, lvl)) {
	        out += ' ';
	      }
	
	      out += '/>';
	    }
	
	    return out;
	  }
	
	  function shouldRenderMultilineAttr(attributes, inlineAttributeString, containsMultilineAttr, inline, lvl) {
	    return (isInlineAttributeTooLong(attributes, inlineAttributeString, lvl) || containsMultilineAttr) && !inline;
	  }
	
	  function isInlineAttributeTooLong(attributes, inlineAttributeString, lvl) {
	    if (typeof maxInlineAttributesLineLength === 'undefined') {
	      // For backwards compatibility, if the new option is undefined, use previous logic to determine
	      // whether or not to render multiline attributes based on the number of attributes
	      return attributes.length > 1;
	    } else {
	      return spacer(lvl, tabStop).length + inlineAttributeString.length > maxInlineAttributesLineLength;
	    }
	  }
	
	  function formatProps(props, defaultProps, inline, lvl) {
	    var formatted = Object.keys(props).filter(noChildren);
	
	    if (useBooleanShorthandSyntax) {
	      formatted = formatted.filter(function (key) {
	        return noFalse(props[key], defaultProps[key]);
	      });
	    }
	
	    if (!showDefaultProps) {
	      formatted = formatted.filter(function (key) {
	        return defaultProps[key] ? defaultProps[key] !== props[key] : true;
	      });
	    }
	
	    return formatted.sort().map(function (propName) {
	      return getJSXAttribute(propName, props[propName], inline, lvl);
	    });
	  }
	
	  function getJSXAttribute(name, value, inline, lvl) {
	    return {
	      name: name,
	      type: getValueType(value),
	      value: formatJSXAttribute(value, inline, lvl).replace(/'?<__reactElementToJSXString__Wrapper__>/g, '').replace(/<\/__reactElementToJSXString__Wrapper__>'?/g, '')
	    };
	  }
	
	  function formatJSXAttribute(propValue, inline, lvl) {
	    if (typeof propValue === 'string') {
	      return '"' + propValue + '"';
	    }
	
	    if ((typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue)) === 'symbol') {
	      return '{' + propValue.toString() + '}';
	    }
	
	    return '{' + formatValue(propValue, inline, lvl) + '}';
	  }
	
	  function getValueType(value) {
	    if ((0, _testUtils.isElement)(value)) {
	      return 'element';
	    }
	
	    if ((0, _isPlainObject2.default)(value)) {
	      return 'plainObject';
	    }
	
	    if (Array.isArray(value)) {
	      return 'array';
	    }
	
	    return typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  }
	
	  function formatValue(value, inline, lvl) {
	    var wrapper = '__reactElementToJSXString__Wrapper__';
	
	    if (typeof value === 'function' && !showFunctions) {
	      return function noRefCheck() {};
	    } else if ((0, _testUtils.isElement)(value)) {
	      // we use this delimiter hack in cases where the react element is a property
	      // of an object from a root prop
	      // i.e.
	      //   reactElementToJSXString(<div a={{b: <div />}} />
	      //   // <div a={{b: <div />}} />
	      // we then remove the whole wrapping
	      // otherwise, the element would be surrounded by quotes: <div a={{b: '<div />'}} />
	      return '<' + wrapper + '>' + toJSXString({ ReactElement: value, inline: true }) + '</' + wrapper + '>';
	    } else if ((0, _isPlainObject2.default)(value) || Array.isArray(value)) {
	      return '<' + wrapper + '>' + stringifyObject(value, inline, lvl) + '</' + wrapper + '>';
	    }
	
	    return value;
	  }
	
	  function recurse(_ref4) {
	    var lvl = _ref4.lvl,
	        inline = _ref4.inline;
	
	    return function (Element) {
	      return toJSXString({ ReactElement: Element, lvl: lvl, inline: inline });
	    };
	  }
	
	  function stringifyObject(obj, inline, lvl) {
	    if (Object.keys(obj).length > 0 || obj.length > 0) {
	      // eslint-disable-next-line array-callback-return
	      obj = (0, _traverse2.default)(obj).map(function (value) {
	        if ((0, _testUtils.isElement)(value) || this.isLeaf) {
	          this.update(formatValue(value, inline, lvl));
	        }
	      });
	
	      obj = (0, _sortobject2.default)(obj);
	    }
	
	    var stringified = (0, _stringifyObject2.default)(obj);
	
	    if (inline) {
	      return (0, _collapseWhiteSpace2.default)(stringified).replace(/{ /g, '{').replace(/ }/g, '}').replace(/\[ /g, '[').replace(/ ]/g, ']');
	    }
	
	    // Replace tabs with spaces, and add necessary indentation in front of each new line
	    return stringified.replace(/\t/g, spacer(1, tabStop)).replace(/\n([^$])/g, '\n' + spacer(lvl + 1, tabStop) + '$1');
	  }
	}
	
	function getDefaultDisplayName(ReactElement) {
	  return ReactElement.type.displayName || ReactElement.type.name || ( // function name
	  typeof ReactElement.type === 'function' ? // function without a name, you should provide one
	  'No Display Name' : ReactElement.type);
	}
	
	function getDefaultProps(ReactElement) {
	  return ReactElement.type.defaultProps || {};
	}
	
	function mergePlainStringChildren(prev, cur) {
	  var lastItem = prev[prev.length - 1];
	
	  if (typeof cur === 'number') {
	    cur = String(cur);
	  }
	
	  if (typeof lastItem === 'string' && typeof cur === 'string') {
	    prev[prev.length - 1] += cur;
	  } else {
	    prev.push(cur);
	  }
	
	  return prev;
	}
	
	function spacer(times, tabStop) {
	  return times === 0 ? '' : (0, _fill3.default)(new Array(times * tabStop), ' ').join('');
	}
	
	function noChildren(propName) {
	  return propName !== 'children';
	}
	
	function noFalse(propValue, defaultValue) {
	  return typeof propValue !== 'boolean' || propValue || Boolean(defaultValue);
	}
	
	function onlyMeaningfulChildren(children) {
	  return children !== true && children !== false && children !== null && children !== '';
	}

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	/**
	 * @author Titus Wormer
	 * @copyright 2015 Titus Wormer
	 * @license MIT
	 * @module collapse-white-space
	 * @fileoverview Replace multiple white-space characters
	 *   with a single space.
	 */
	
	'use strict';
	
	/* Expose. */
	module.exports = collapse;
	
	/**
	 * Replace multiple white-space characters with a single space.
	 *
	 * @example
	 *   collapse(' \t\nbar \nbaz\t'); // ' bar baz '
	 *
	 * @param {string} value - Value with uncollapsed white-space,
	 *   coerced to string.
	 * @return {string} - Value with collapsed white-space.
	 */
	function collapse(value) {
	  return String(value).replace(/\s+/g, ' ');
	}


/***/ }),
/* 8 */
7,
/* 9 */
/***/ (function(module, exports) {

	module.exports = object => {
	  return Object.getOwnPropertySymbols(object)
	    .filter(keySymbol => object.propertyIsEnumerable(keySymbol))
	}


/***/ }),
/* 10 */
/***/ (function(module, exports) {

	'use strict';
	module.exports = function (x) {
		var type = typeof x;
		return x !== null && (type === 'object' || type === 'function');
	};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var isObject = __webpack_require__(13);
	
	function isObjectObject(o) {
	  return isObject(o) === true
	    && Object.prototype.toString.call(o) === '[object Object]';
	}
	
	module.exports = function isPlainObject(o) {
	  var ctor,prot;
	  
	  if (isObjectObject(o) === false) return false;
	  
	  // If has modified constructor
	  ctor = o.constructor;
	  if (typeof ctor !== 'function') return false;
	  
	  // If has modified prototype
	  prot = ctor.prototype;
	  if (isObjectObject(prot) === false) return false;
	  
	  // If constructor does not have an Object-specific method
	  if (prot.hasOwnProperty('isPrototypeOf') === false) {
	    return false;
	  }
	  
	  // Most likely a plain Object
	  return true;
	};


/***/ }),
/* 12 */
/***/ (function(module, exports) {

	'use strict';
	module.exports = function (re) {
		return Object.prototype.toString.call(re) === '[object RegExp]';
	};


/***/ }),
/* 13 */
/***/ (function(module, exports) {

	/*!
	 * isobject <https://github.com/jonschlinkert/isobject>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	module.exports = function isObject(val) {
	  return val != null && typeof val === 'object'
	    && !Array.isArray(val);
	};


/***/ }),
/* 14 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.clamp` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {number} number The number to clamp.
	 * @param {number} [lower] The lower bound.
	 * @param {number} upper The upper bound.
	 * @returns {number} Returns the clamped number.
	 */
	function baseClamp(number, lower, upper) {
	  if (number === number) {
	    if (upper !== undefined) {
	      number = number <= upper ? number : upper;
	    }
	    if (lower !== undefined) {
	      number = number >= lower ? number : lower;
	    }
	  }
	  return number;
	}
	
	module.exports = baseClamp;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(4),
	    toLength = __webpack_require__(30);
	
	/**
	 * The base implementation of `_.fill` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to fill.
	 * @param {*} value The value to fill `array` with.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns `array`.
	 */
	function baseFill(array, value, start, end) {
	  var length = array.length;
	
	  start = toInteger(start);
	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = (end === undefined || end > length) ? length : toInteger(end);
	  if (end < 0) {
	    end += length;
	  }
	  end = start > end ? 0 : toLength(end);
	  while (start < end) {
	    array[start++] = value;
	  }
	  return array;
	}
	
	module.exports = baseFill;


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	module.exports = freeGlobal;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(2);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];
	
	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	
	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}
	
	module.exports = getRawTag;


/***/ }),
/* 18 */
/***/ (function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;
	
	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}
	
	module.exports = isIndex;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(22),
	    isArrayLike = __webpack_require__(24),
	    isIndex = __webpack_require__(18),
	    isObject = __webpack_require__(1);
	
	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}
	
	module.exports = isIterateeCall;


/***/ }),
/* 20 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}
	
	module.exports = objectToString;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(16);
	
	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	module.exports = root;


/***/ }),
/* 22 */
/***/ (function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}
	
	module.exports = eq;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFill = __webpack_require__(15),
	    isIterateeCall = __webpack_require__(19);
	
	/**
	 * Fills elements of `array` with `value` from `start` up to, but not
	 * including, `end`.
	 *
	 * **Note:** This method mutates `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.2.0
	 * @category Array
	 * @param {Array} array The array to fill.
	 * @param {*} value The value to fill `array` with.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns `array`.
	 * @example
	 *
	 * var array = [1, 2, 3];
	 *
	 * _.fill(array, 'a');
	 * console.log(array);
	 * // => ['a', 'a', 'a']
	 *
	 * _.fill(Array(3), 2);
	 * // => [2, 2, 2]
	 *
	 * _.fill([4, 6, 8, 10], '*', 1, 3);
	 * // => [4, '*', '*', 10]
	 */
	function fill(array, value, start, end) {
	  var length = array == null ? 0 : array.length;
	  if (!length) {
	    return [];
	  }
	  if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	    start = 0;
	    end = length;
	  }
	  return baseFill(array, value, start, end);
	}
	
	module.exports = fill;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(25),
	    isLength = __webpack_require__(26);
	
	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}
	
	module.exports = isArrayLike;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(3),
	    isObject = __webpack_require__(1);
	
	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}
	
	module.exports = isFunction;


/***/ }),
/* 26 */
/***/ (function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	module.exports = isLength;


/***/ }),
/* 27 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}
	
	module.exports = isObjectLike;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(3),
	    isObjectLike = __webpack_require__(27);
	
	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';
	
	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && baseGetTag(value) == symbolTag);
	}
	
	module.exports = isSymbol;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	var toNumber = __webpack_require__(31);
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_INTEGER = 1.7976931348623157e+308;
	
	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = (value < 0 ? -1 : 1);
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}
	
	module.exports = toFinite;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	var baseClamp = __webpack_require__(14),
	    toInteger = __webpack_require__(4);
	
	/** Used as references for the maximum length and index of an array. */
	var MAX_ARRAY_LENGTH = 4294967295;
	
	/**
	 * Converts `value` to an integer suitable for use as the length of an
	 * array-like object.
	 *
	 * **Note:** This method is based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toLength(3.2);
	 * // => 3
	 *
	 * _.toLength(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toLength(Infinity);
	 * // => 4294967295
	 *
	 * _.toLength('3.2');
	 * // => 3
	 */
	function toLength(value) {
	  return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	}
	
	module.exports = toLength;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(1),
	    isSymbol = __webpack_require__(28);
	
	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;
	
	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;
	
	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
	
	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;
	
	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;
	
	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;
	
	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}
	
	module.exports = toNumber;


/***/ }),
/* 32 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	module.exports = function sortObject(obj, comparator) {
		// Arrays
		if (Array.isArray(obj)) {
			var result = [];
			for (var i = 0; i < obj.length; ++i) {
				// Fetch
				var value = obj[i];
	
				// Recurse if object or array
				if (value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
					value = sortObject(value, comparator);
				}
	
				// Push
				result.push(value);
			}
			return result;
		}
	
		// Objects
		else {
				var _result = {};
				var sortedKeys = Object.keys(obj).sort(comparator);
				for (var _i = 0; _i < sortedKeys.length; ++_i) {
					// Fetch
					var key = sortedKeys[_i];
					var _value = obj[key];
	
					// Recurse if object or array
					if (_value != null && (typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) === 'object') {
						_value = sortObject(_value, comparator);
					}
	
					// Push
					_result[key] = _value;
				}
				return _result;
			}
	};

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	const isRegexp = __webpack_require__(12);
	const isObj = __webpack_require__(10);
	const getOwnEnumPropSymbols = __webpack_require__(9);
	
	module.exports = (val, opts, pad) => {
		const seen = [];
	
		return (function stringify(val, opts, pad) {
			opts = opts || {};
			opts.indent = opts.indent || '\t';
			pad = pad || '';
	
			let tokens;
	
			if (opts.inlineCharacterLimit === undefined) {
				tokens = {
					newLine: '\n',
					newLineOrSpace: '\n',
					pad,
					indent: pad + opts.indent
				};
			} else {
				tokens = {
					newLine: '@@__STRINGIFY_OBJECT_NEW_LINE__@@',
					newLineOrSpace: '@@__STRINGIFY_OBJECT_NEW_LINE_OR_SPACE__@@',
					pad: '@@__STRINGIFY_OBJECT_PAD__@@',
					indent: '@@__STRINGIFY_OBJECT_INDENT__@@'
				};
			}
	
			const expandWhiteSpace = string => {
				if (opts.inlineCharacterLimit === undefined) {
					return string;
				}
	
				const oneLined = string
					.replace(new RegExp(tokens.newLine, 'g'), '')
					.replace(new RegExp(tokens.newLineOrSpace, 'g'), ' ')
					.replace(new RegExp(tokens.pad + '|' + tokens.indent, 'g'), '');
	
				if (oneLined.length <= opts.inlineCharacterLimit) {
					return oneLined;
				}
	
				return string
					.replace(new RegExp(tokens.newLine + '|' + tokens.newLineOrSpace, 'g'), '\n')
					.replace(new RegExp(tokens.pad, 'g'), pad)
					.replace(new RegExp(tokens.indent, 'g'), pad + opts.indent);
			};
	
			if (seen.indexOf(val) !== -1) {
				return '"[Circular]"';
			}
	
			if (val === null ||
				val === undefined ||
				typeof val === 'number' ||
				typeof val === 'boolean' ||
				typeof val === 'function' ||
				typeof val === 'symbol' ||
				isRegexp(val)) {
				return String(val);
			}
	
			if (val instanceof Date) {
				return `new Date('${val.toISOString()}')`;
			}
	
			if (Array.isArray(val)) {
				if (val.length === 0) {
					return '[]';
				}
	
				seen.push(val);
	
				const ret = '[' + tokens.newLine + val.map((el, i) => {
					const eol = val.length - 1 === i ? tokens.newLine : ',' + tokens.newLineOrSpace;
					return tokens.indent + stringify(el, opts, pad + opts.indent) + eol;
				}).join('') + tokens.pad + ']';
	
				seen.pop(val);
	
				return expandWhiteSpace(ret);
			}
	
			if (isObj(val)) {
				const objKeys = Object.keys(val).concat(getOwnEnumPropSymbols(val));
	
				if (objKeys.length === 0) {
					return '{}';
				}
	
				seen.push(val);
	
				const ret = '{' + tokens.newLine + objKeys.map((el, i) => {
					if (opts.filter && !opts.filter(val, el)) {
						return '';
					}
	
					const eol = objKeys.length - 1 === i ? tokens.newLine : ',' + tokens.newLineOrSpace;
					const isSymbol = typeof el === 'symbol';
					const isClassic = !isSymbol && /^[a-z$_][a-z$_0-9]*$/i.test(el);
					const key = isSymbol || isClassic ? el : stringify(el, opts);
					return tokens.indent + String(key) + ': ' + stringify(val[el], opts, pad + opts.indent) + eol;
				}).join('') + tokens.pad + '}';
	
				seen.pop(val);
	
				return expandWhiteSpace(ret);
			}
	
			val = String(val).replace(/[\r\n]/g, x => x === '\n' ? '\\n' : '\\r');
	
			if (opts.singleQuotes === false) {
				val = val.replace(/"/g, '\\"');
				return `"${val}"`;
			}
	
			val = val.replace(/'/g, '\\\'');
			return `'${val}'`;
		})(val, opts, pad);
	};


/***/ }),
/* 34 */
/***/ (function(module, exports) {

	var traverse = module.exports = function (obj) {
	    return new Traverse(obj);
	};
	
	function Traverse (obj) {
	    this.value = obj;
	}
	
	Traverse.prototype.get = function (ps) {
	    var node = this.value;
	    for (var i = 0; i < ps.length; i ++) {
	        var key = ps[i];
	        if (!node || !hasOwnProperty.call(node, key)) {
	            node = undefined;
	            break;
	        }
	        node = node[key];
	    }
	    return node;
	};
	
	Traverse.prototype.has = function (ps) {
	    var node = this.value;
	    for (var i = 0; i < ps.length; i ++) {
	        var key = ps[i];
	        if (!node || !hasOwnProperty.call(node, key)) {
	            return false;
	        }
	        node = node[key];
	    }
	    return true;
	};
	
	Traverse.prototype.set = function (ps, value) {
	    var node = this.value;
	    for (var i = 0; i < ps.length - 1; i ++) {
	        var key = ps[i];
	        if (!hasOwnProperty.call(node, key)) node[key] = {};
	        node = node[key];
	    }
	    node[ps[i]] = value;
	    return value;
	};
	
	Traverse.prototype.map = function (cb) {
	    return walk(this.value, cb, true);
	};
	
	Traverse.prototype.forEach = function (cb) {
	    this.value = walk(this.value, cb, false);
	    return this.value;
	};
	
	Traverse.prototype.reduce = function (cb, init) {
	    var skip = arguments.length === 1;
	    var acc = skip ? this.value : init;
	    this.forEach(function (x) {
	        if (!this.isRoot || !skip) {
	            acc = cb.call(this, acc, x);
	        }
	    });
	    return acc;
	};
	
	Traverse.prototype.paths = function () {
	    var acc = [];
	    this.forEach(function (x) {
	        acc.push(this.path); 
	    });
	    return acc;
	};
	
	Traverse.prototype.nodes = function () {
	    var acc = [];
	    this.forEach(function (x) {
	        acc.push(this.node);
	    });
	    return acc;
	};
	
	Traverse.prototype.clone = function () {
	    var parents = [], nodes = [];
	    
	    return (function clone (src) {
	        for (var i = 0; i < parents.length; i++) {
	            if (parents[i] === src) {
	                return nodes[i];
	            }
	        }
	        
	        if (typeof src === 'object' && src !== null) {
	            var dst = copy(src);
	            
	            parents.push(src);
	            nodes.push(dst);
	            
	            forEach(objectKeys(src), function (key) {
	                dst[key] = clone(src[key]);
	            });
	            
	            parents.pop();
	            nodes.pop();
	            return dst;
	        }
	        else {
	            return src;
	        }
	    })(this.value);
	};
	
	function walk (root, cb, immutable) {
	    var path = [];
	    var parents = [];
	    var alive = true;
	    
	    return (function walker (node_) {
	        var node = immutable ? copy(node_) : node_;
	        var modifiers = {};
	        
	        var keepGoing = true;
	        
	        var state = {
	            node : node,
	            node_ : node_,
	            path : [].concat(path),
	            parent : parents[parents.length - 1],
	            parents : parents,
	            key : path.slice(-1)[0],
	            isRoot : path.length === 0,
	            level : path.length,
	            circular : null,
	            update : function (x, stopHere) {
	                if (!state.isRoot) {
	                    state.parent.node[state.key] = x;
	                }
	                state.node = x;
	                if (stopHere) keepGoing = false;
	            },
	            'delete' : function (stopHere) {
	                delete state.parent.node[state.key];
	                if (stopHere) keepGoing = false;
	            },
	            remove : function (stopHere) {
	                if (isArray(state.parent.node)) {
	                    state.parent.node.splice(state.key, 1);
	                }
	                else {
	                    delete state.parent.node[state.key];
	                }
	                if (stopHere) keepGoing = false;
	            },
	            keys : null,
	            before : function (f) { modifiers.before = f },
	            after : function (f) { modifiers.after = f },
	            pre : function (f) { modifiers.pre = f },
	            post : function (f) { modifiers.post = f },
	            stop : function () { alive = false },
	            block : function () { keepGoing = false }
	        };
	        
	        if (!alive) return state;
	        
	        function updateState() {
	            if (typeof state.node === 'object' && state.node !== null) {
	                if (!state.keys || state.node_ !== state.node) {
	                    state.keys = objectKeys(state.node)
	                }
	                
	                state.isLeaf = state.keys.length == 0;
	                
	                for (var i = 0; i < parents.length; i++) {
	                    if (parents[i].node_ === node_) {
	                        state.circular = parents[i];
	                        break;
	                    }
	                }
	            }
	            else {
	                state.isLeaf = true;
	                state.keys = null;
	            }
	            
	            state.notLeaf = !state.isLeaf;
	            state.notRoot = !state.isRoot;
	        }
	        
	        updateState();
	        
	        // use return values to update if defined
	        var ret = cb.call(state, state.node);
	        if (ret !== undefined && state.update) state.update(ret);
	        
	        if (modifiers.before) modifiers.before.call(state, state.node);
	        
	        if (!keepGoing) return state;
	        
	        if (typeof state.node == 'object'
	        && state.node !== null && !state.circular) {
	            parents.push(state);
	            
	            updateState();
	            
	            forEach(state.keys, function (key, i) {
	                path.push(key);
	                
	                if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);
	                
	                var child = walker(state.node[key]);
	                if (immutable && hasOwnProperty.call(state.node, key)) {
	                    state.node[key] = child.node;
	                }
	                
	                child.isLast = i == state.keys.length - 1;
	                child.isFirst = i == 0;
	                
	                if (modifiers.post) modifiers.post.call(state, child);
	                
	                path.pop();
	            });
	            parents.pop();
	        }
	        
	        if (modifiers.after) modifiers.after.call(state, state.node);
	        
	        return state;
	    })(root).node;
	}
	
	function copy (src) {
	    if (typeof src === 'object' && src !== null) {
	        var dst;
	        
	        if (isArray(src)) {
	            dst = [];
	        }
	        else if (isDate(src)) {
	            dst = new Date(src.getTime ? src.getTime() : src);
	        }
	        else if (isRegExp(src)) {
	            dst = new RegExp(src);
	        }
	        else if (isError(src)) {
	            dst = { message: src.message };
	        }
	        else if (isBoolean(src)) {
	            dst = new Boolean(src);
	        }
	        else if (isNumber(src)) {
	            dst = new Number(src);
	        }
	        else if (isString(src)) {
	            dst = new String(src);
	        }
	        else if (Object.create && Object.getPrototypeOf) {
	            dst = Object.create(Object.getPrototypeOf(src));
	        }
	        else if (src.constructor === Object) {
	            dst = {};
	        }
	        else {
	            var proto =
	                (src.constructor && src.constructor.prototype)
	                || src.__proto__
	                || {}
	            ;
	            var T = function () {};
	            T.prototype = proto;
	            dst = new T;
	        }
	        
	        forEach(objectKeys(src), function (key) {
	            dst[key] = src[key];
	        });
	        return dst;
	    }
	    else return src;
	}
	
	var objectKeys = Object.keys || function keys (obj) {
	    var res = [];
	    for (var key in obj) res.push(key)
	    return res;
	};
	
	function toS (obj) { return Object.prototype.toString.call(obj) }
	function isDate (obj) { return toS(obj) === '[object Date]' }
	function isRegExp (obj) { return toS(obj) === '[object RegExp]' }
	function isError (obj) { return toS(obj) === '[object Error]' }
	function isBoolean (obj) { return toS(obj) === '[object Boolean]' }
	function isNumber (obj) { return toS(obj) === '[object Number]' }
	function isString (obj) { return toS(obj) === '[object String]' }
	
	var isArray = Array.isArray || function isArray (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};
	
	var forEach = function (xs, fn) {
	    if (xs.forEach) return xs.forEach(fn)
	    else for (var i = 0; i < xs.length; i++) {
	        fn(xs[i], i, xs);
	    }
	};
	
	forEach(objectKeys(Traverse.prototype), function (key) {
	    traverse[key] = function (obj) {
	        var args = [].slice.call(arguments, 1);
	        var t = new Traverse(obj);
	        return t[key].apply(t, args);
	    };
	});
	
	var hasOwnProperty = Object.hasOwnProperty || function (obj, key) {
	    return key in obj;
	};


/***/ }),
/* 35 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_35__;

/***/ })
/******/ ])))
});
;
//# sourceMappingURL=jsx-chai.min.js.map